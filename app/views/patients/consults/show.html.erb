<div class="wrapper wrapper-content">
    <div id="videobox" style="background-color:white;">
    </div>
</div>
<script src="https://static.opentok.com/v2/js/opentok.min.js"></script>
<script type="text/javascript">
    var apiKey = 45307712;
    var sessionID = "<%= @consult.sessionId %>";
    var token = "<%= @tok_token %>";

    var session;
    var publisher;

    if (OT.checkSystemRequirements() == 1) {
        // Replace with the replacement element ID:
        publisher = OT.initPublisher("videobox");
        publisher.on({
            streamCreated: function (event) {
                console.log("Publisher started streaming.");
            },
            streamDestroyed: function (event) {
                console.log("Publisher stopped streaming. Reason: "
                   + event.reason);
            }
        });

        // Replace apiKey and sessionID with your own values:
        session = OT.initSession(apiKey, sessionID);
        // Replace token with your own value:
        session.connect(token, function (error) {
            if (session.capabilities.publish == 1) {
                session.publish(publisher);
            } else {
                console.log("You cannot publish an audio-video stream.");
            }
        });
    } else {
        console.log("The client does not support WebRTC.");
    }
    // var session;

    // TB.setLogLevel(TB.DEBUG);
    // var session = TB.initSession(sessionId);
    // console.log(session);
    // session.addEventListener("sessionConnected", sessionConnectedHandler);
    // session.addEventListener("streamCreated", streamCreatedHandler);
    // session.connect(apiKey, token);

    // var publisher;
    // function sessionConnectedHandler(event) {
    //     console.log("inside sessionConnectedHandler")
    //     publisher = TB.initPublisher(apiKey, "videobox");
    //     session.publish(publisher);

    //     // Subscribe to streams that were in the session when we connected
    //     subscribeToStreams(event.streams);
    // }

    // function streamCreatedHandler(event) {
    //     // Subscribe to any new streams that are created
    //     subscribeToStreams(event.streams);
    // }

    // function subscribeToStreams(streams) {
    //     for (var i = 0; i < streams.length; i++) {
    //         // Make sure we don"t subscribe to ourself
    //         if (streams[i].connection.connectionId == session.connection.connectionId) {
    //         return;
    //         }

    //         // Create the div to put the subscriber element in to
    //         var div = document.createElement("div");
    //         div.setAttribute("id", "stream" + streams[i].streamId);
    //         document.body.appendChild(div);

    //         // Subscribe to the stream
    //         session.subscribe(streams[i], div.id);
    //     }
    // }
</script>

