<div class="wrapper wrapper-content">
    <div class="row text-center">
        <h1><strong>Select Your Pharmacy</strong></h1>
        <br><br><br>
        <div class="col-lg-6 text-center">
            <div class="ibox">
                <div class="ibox-content">
                    <br>
                    <h1>Can't Find it? Try this.</h1>
                    <br>
                    <%= form_for(:consult, url: {action: "create"}) do |f| %>
                    <div class="form-group col-lg-12 ">
                        <%= label_tag(:medications, "Postal Code:") %>
                        <%= f.text_field :medications, :class => 'form-control', :placeholder => 'Enter Your Postal Code or Address' %>
                    </div>
                    <br>
                    <div class="form-group col-lg-12 ">
                        <%= label_tag(:allergies, "Pharmacy Name:") %>
                        <%= f.text_field :allergies, :class => 'form-control', :placeholder => 'Use Your Favorite Pharmacy', :type => 'text' %>
                    </div>
                    <br>
                    <p><br><%= link_to 'Search', new_patients_consult_path, :class =>"btn btn-primary" %></p>
                <% end %>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <title>Places Searchbox</title>
            <input id="pac-input" class="controls" type="text" placeholder="Search Box">
            <div id="map"></div>
        </div>
    </div>
</div>

<% content_for :javascript do %>

<script type="text/javascript">
    function initAutocomplete() {
      var map = new google.maps.Map(document.getElementById('map'), {
        center: {lat: -33.8688, lng: 151.2195},
        zoom: 13,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      });

      // Create the search box and link it to the UI element.
      var input = document.getElementById('pac-input');
      var searchBox = new google.maps.places.SearchBox(input);
      map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

      // Bias the SearchBox results towards current map's viewport.
      map.addListener('bounds_changed', function() {
        searchBox.setBounds(map.getBounds());
      });

      var markers = [];
      // [START region_getplaces]
      // Listen for the event fired when the user selects a prediction and retrieve
      // more details for that place.
      searchBox.addListener('places_changed', function() {
        var places = searchBox.getPlaces();

        if (places.length == 0) {
          return;
        }

        // Clear out the old markers.
        markers.forEach(function(marker) {
          marker.setMap(null);
        });
        markers = [];

        // For each place, get the icon, name and location.
        var bounds = new google.maps.LatLngBounds();
        places.forEach(function(place) {
          var icon = {
            url: place.icon,
            size: new google.maps.Size(71, 71),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(17, 34),
            scaledSize: new google.maps.Size(25, 25)
          };

          // Create a marker for each place.
          markers.push(new google.maps.Marker({
            map: map,
            icon: icon,
            title: place.name,
            position: place.geometry.location
          }));

          if (place.geometry.viewport) {
            // Only geocodes have viewport.
            bounds.union(place.geometry.viewport);
          } else {
            bounds.extend(place.geometry.location);
          }
        });
        map.fitBounds(bounds);
      });
      // [END region_getplaces]
    }

</script>
<script src="https://maps.googleapis.com/maps/api/js?libraries=places&callback=initAutocomplete" async defer></script>
<% end %>
